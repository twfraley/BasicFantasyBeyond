@model BasicFantasyBeyond.Models.CharacterModels.CharacterDetails

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Character</h2>

<div class="dropdown" style="display:inline-block">
    <button class="btn btn-warning dropdown-toggle" type="button" data-toggle="dropdown" value="@Model.Id" runat="server"><span class="glyphicon glyphicon-user"></span> Assign <span class="caret"></span></button>
    <ul class="dropdown-menu" onclick="location.href='@Url.Action("AssignTicket", "Home", new {AssignId = Model.Id })'">
        @foreach (var user in (IEnumerable<SelectListItem>)ViewBag.User)
        {
            <li>@Html.S</li>
        }
    </ul>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container container-fluid">
        <h4>Character</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.CharacterID)
        @Html.HiddenFor(m => m.CharacterLevel)

        <div class="row">
            <div class="col-md-12 form-group mb-0">
                <label for="inputCharacterName">Character Name:</label>
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.CharacterName, new { htmlAttributes = new { @class = "form-control", id = "inputCharacterName" } })
                @Html.ValidationMessageFor(model => model.CharacterName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row col-12 border">

            <div class="row col-12">
                <div class="col-md-6 mb-0 border">
                    <label for="inputCharacterName">Character Race:</label>
                </div>
                <div class="col-md-6 mb-0 border">
                    <label for="inputCharacterName">Character Class:</label>
                </div>
            </div>
            <div class="row col-12">
                <div class="col-md-6 border">
                    @Html.EnumDropDownListFor(model => model.CharacterClass, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CharacterClass, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 border">
                    @Html.EnumDropDownListFor(model => model.CharacterRace, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CharacterRace, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="form-group">
            Strength:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterStr, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterStr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Dexterity:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterDex, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterDex, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Constitution:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterCon, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterCon, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Intelligence:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterInt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterInt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Wisdom:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterWis, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterWis, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Charisma:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterCha, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterCha, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Experience Points:
            <div class="col-md-10">
                @Html.EditorFor(model => model.CharacterXP, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CharacterXP, "", new { @class = "text-danger" })
            </div>
            <div>
                Current Level:
                @Html.DisplayFor(model => model.CharacterLevel)
            </div>
        </div>

        <div class="form-group">
            Manage Hitpoints:
            <div class="col-md-10">
                Range:
                @Html.Raw($"{Model.HitPointRange.Min()} - {Model.HitPointRange.Max()}")
                <p />
                @Html.EditorFor(model => model.CharacterHP)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save Changes" class="btn btn-dark rounded-0 " />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
